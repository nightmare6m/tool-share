import Head from 'next/head'
import {useQuery, useMutation} from '@apollo/client';
import Router from 'next/router'
import {useState} from 'react';
import styles from '../styles/Home.module.css'
import {GET_MY_TOOLS, CREATE_TOOL, UPDATE_TOOL, DELETE_TOOL} from 'features/tools/queries';
import {CATEGORIES} from 'features/tools/constants';
import { ToolCreate } from 'features/tools/components/ToolCreate';
import { ToolUpdate } from 'features/tools/components/ToolUpdate';
import { ToolCard } from 'features/tools/components/ToolCard';
import { UpdateToolCacheCreate, UpdateToolCacheEdit, UpdateToolCacheDelete } from 'features/tools/contextUpdates';

export default function Home() {
  const [updateId, setUpdateId] = useState("");
  const token = typeof window !== "undefined" && localStorage.getItem('accessToken')?localStorage.getItem('accessToken'): "";
  if(typeof window !== "undefined" && !token){
    Router.push('/login')
  }
  const [createToolMutation, { createToolData, createToolLoading, createToolError }] = useMutation(CREATE_TOOL, {
    context: {
        headers: {
            "Authorization": "Bearer " + token
        }
    },
    update: UpdateToolCacheCreate
  });
  const [updateToolMutation, { updateToolData, updateToolLoading, updateToolError }] = useMutation(UPDATE_TOOL, {
    context: {
        headers: {
            "Authorization": "Bearer " + token
        }
    },
    update: UpdateToolCacheEdit
  });
  const [deleteToolMutation, { deleteToolData, deleteToolLoading, deleteToolError }] = useMutation(DELETE_TOOL, {
    context: {
        headers: {
            "Authorization": "Bearer " + token
        }
    },
    update: UpdateToolCacheDelete
  });
  const {loading, error, data} = useQuery(GET_MY_TOOLS, {
    context: {
        headers: {
            "Authorization": "Bearer " + token
        }
    }
});
  if(loading){
    return "loading";
  }
  if(error){
    return "error";
  }

 
  async function createTool(description, category, quantity){
    await createToolMutation({
      variables: {
        input: {
          description,
          category,
          quantity
        }
      }
    });
  }
  async function updateTool(id, description, category, quantity){
    await updateToolMutation({
      variables: {
        input: {
          id,
          description,
          category,
          quantity
        }
      }
    });
    setUpdateId("");
  }
  async function deleteTool(id){
    await deleteToolMutation({
      variables: {
        id
      }
    });
  }

  const updatingTool = data.myTools.tools.find(tool => tool.id === updateId);
  const updatingToolComponent = updatingTool?(<ToolUpdate id={updateId} description={updatingTool.description} category={updatingTool.category} quantity={updatingTool.quantity} cancelUpdate={()=> setUpdateId("")} updateTool={updateTool} />):<span></span>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <ToolCreate createTool={createTool} />
      </div>
      <div>
        {data.myTools.tools.map(tool => (
          <ToolCard tool={tool} categories={CATEGORIES} setUpdateId={setUpdateId} deleteTool={deleteTool} />
        ))}
      </div>
      {updatingToolComponent}
    </div>
  )
}
